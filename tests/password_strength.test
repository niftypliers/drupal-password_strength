<?php

/**
 * @file
 * Tests for password strength module.
 */

/**
 * Tests the functionality of the Password Strength module.
 */
class PasswordStrengthTestCase extends DrupalWebTestCase {
  /**
   * A user able to change her password.
   *
   * @var object
   */
  protected $web_user;

  /**
   * A user with permission to set the minimum password strength required level.
   *
   * @var object
   */
  protected $admin_user;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Password strength required score',
      'description' => 'Test password strength module functionality.',
      'group' => 'Password strength',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('password_strength', 'composer_manager');
    $this->web_user = $this->drupalCreateUser();
    $this->admin_user = $this->drupalCreateUser(array('administer site configuration', 'administer users'));
  }

  /**
   * Tests various levels of minimum scores when changing a user password.
   */
  public function testChangePassword() {
    // Set required score to very weak and test that any password works.
    $this->setRequiredScore('0');
    $this->changePassword($this->web_user, 'Password1');
    $this->assertTrue(password_strength_get_user_score($this->web_user->uid) === 0, t('User password score set.'));
    $this->changePassword($this->web_user, '35qzYI^HUbAZ');
    $this->assertTrue(password_strength_get_user_score($this->web_user->uid) === 4, t('User password score set.'));

    // Set required score to very strong and test that a weak password fails and
    // that a strong password works.
    $this->setRequiredScore('4');
    $this->changePassword($this->web_user, 'Password1', TRUE);
    $this->assertTrue(password_strength_get_user_score($this->web_user->uid) === 4, t('User password score remains the same.'));
    $this->changePassword($this->web_user, '35qzYI^HUbAZ');
    $this->assertTrue(password_strength_get_user_score($this->web_user->uid) === 4, t('User password score remains the same.'));

  }

  /**
   * Tests force password change on login.
   */
  public function testForcePasswordChange() {
    // Verify that a password change is not forced on login if no strength
    // requirement is set, or if the user password is equal to or stronger than
    // the required strength.
    foreach (array('0', '1', '2') as $minimum_strength) {
      $this->setRequiredScore('0');
      // Set password to strength 2 (good) password.
      $this->changePassword($this->web_user, 'demodemo12');
      $this->setRequiredScore($minimum_strength);
      $this->drupalLogin($this->web_user);
      $this->assertNoText(t("Your password does not meet the minimum complexity requirement. You must change your password to proceed on the site."), 'Force password change message is not displayed');
      // Test that the user can browse the site.
      $this->drupalGet('node');
      $this->assertEqual($this->getUrl(), url('node', array('absolute' => TRUE)), 'The user was not redirected to the password form');
      $this->drupalLogout();
    }

    // Verify that a password change is forced on login if the user password is
    // weaker than the required strength.
    $this->setRequiredScore('0');
    $this->changePassword($this->web_user, 'Password1');
    $this->setRequiredScore('4');
    $this->drupalLogin($this->web_user);
    $this->assertEqual($this->getUrl(), url("user/{$this->web_user->uid}/edit", array('query' => array('destination' => "user/{$this->web_user->uid}"), 'absolute' => TRUE)), 'The user was redirected to the password form');
    $this->assertText(t("Your password does not meet the minimum complexity requirement. You must change your password to proceed on the site."), 'Force password change message is displayed');
    // Test that the user cannot browse the site.
    $this->drupalGet('node');
    $this->assertEqual($this->getUrl(), url("user/{$this->web_user->uid}/edit", array('query' => array('destination' => 'node'), 'absolute' => TRUE)), 'The user was redirected to the password form');

    // Test that the password can be set to the stronger password.
    $edit = array();
    $edit['pass[pass1]'] = '35qzYI^HUbAZ';
    $edit['pass[pass2]'] = '35qzYI^HUbAZ';
    // The current password doesn't apply in Drupal 6.
    // $edit['current_pass'] = $account->pass_raw;
    $this->drupalPost("user/{$this->web_user->uid}/edit", $edit, t('Save'));

    // Make sure the user can log in with their new password.
    $this->drupalLogout();
    $this->web_user->pass_raw = '35qzYI^HUbAZ';
    $this->drupalLogin($this->web_user);
    $this->drupalLogout();
  }

  /**
   * Tests user deletion.
   */
  public function testUserDeletion() {
    // Delete web_user and verify password score gets cleaned up.
    variable_set('user_cancel_method', 'user_cancel_reassign');
    variable_set('password_strength_default_required_score', '0');
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('user/' . $this->web_user->uid . '/edit');
    $this->drupalPost(NULL, NULL, t('Delete'));
    // Confirm deletion.
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertFalse(user_load($this->web_user->uid), 'User is not found in the database.');
    $this->assertTrue(password_strength_get_user_score($this->web_user->uid) === NULL, t('User password score removed.'));
  }

  /**
   * Tests a user account password change.
   *
   * @param object $account
   *   Drupal user account for additional contexts.
   * @param string $new_pass
   *   Plain-text password to be used as new password.
   * @param bool $too_weak
   *   (Optional) Whether the password is too weak and the change should fail.
   */
  public function changePassword($account, $new_pass, $too_weak = FALSE) {
    $this->drupalLogin($account);

    // Check that filling out a single password field does not validate.
    $edit = array();
    $edit['pass[pass1]'] = 'foo';
    $edit['pass[pass2]'] = $new_pass;
    $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertText(t("The specified passwords do not match."), 'Typing mismatched passwords displays an error message.');

    $edit['pass[pass1]'] = $new_pass;
    $edit['pass[pass2]'] = '';
    $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertText(t("The specified passwords do not match."), 'Typing mismatched passwords displays an error message.');

    // Test that the error message appears when attempting to change the mail or
    // pass without the current password.
    $edit = array();
    $edit['mail'] = $this->randomName() . '@new.example.com';
    // The current password doesn't apply in Drupal 6.
    // $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));
    // $this->assertRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('E-mail address'))));

    // The current password doesn't apply in Drupal 6.
    // $edit['current_pass'] = $account->pass_raw;
    $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));
    $this->assertRaw(t("The changes have been saved."));

    // Test that the user must enter current password before changing passwords.
    $edit = array();
    $edit['pass[pass1]'] = $new_pass;
    $edit['pass[pass2]'] = $new_pass;
    // The current password doesn't apply in Drupal 6.
    // $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));
    // $this->assertRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('Password'))));

    // Try again with the current password.
    // The current password doesn't apply in Drupal 6.
    // $edit['current_pass'] = $account->pass_raw;
    $this->drupalPost("user/$account->uid/edit", $edit, t('Save'));

    if ($too_weak) {
      $this->assertRaw(t("The password that you entered does not meet the password strength requirement (%strength).", array('%strength' => password_strength_get_score(password_strength_required_score($account)))));
    }
    else {
      $this->assertRaw(t("The changes have been saved."));

      // Make sure the user can log in with their new password.
      $this->drupalLogout();
      $account->pass_raw = $new_pass;
      $this->drupalLogin($account);
      $this->drupalLogout();
    }
  }

  /**
   * Sets a required score through the admin UI.
   *
   * @param int $score
   *   An integer corresponding to a password strength.
   */
  public function setRequiredScore($score) {
    $this->drupalLogin($this->admin_user);
    $edit = array();
    $edit['password_strength_default_required_score'] = $score;
    $this->drupalPost('admin/settings/password-strength', $edit, t('Save configuration'));

    // Ensure the value was saved.
    $this->assertIdentical(variable_get('password_strength_default_required_score', NULL), $score, 'Password strength was saved properly.');
  }
}
