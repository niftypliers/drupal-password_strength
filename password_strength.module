<?php
// $Id$


/**
* Implementation of hook_perm().
*/
function password_strength_perm() {
  return array('configure password strength');
}




/**
* Implementation of hook_menu().
*/
function password_strength_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) { 
    
    $items[] = array(
  		'path' => 'admin/settings/password_strength', 
  		'title' => t('Password Strength'),
  		'callback' => 'drupal_get_form', 
  		'callback arguments' => array('password_strength_admin_settings'),
  		'access' => user_access('configure password strength'),
  	);
  }
  return $items;
}



function password_strength_admin_settings() {
  $form['password_strength_verify_on_server'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enforce password strength'),
    '#default_value' => variable_get('password_strength_verify_on_server', 0),
    '#description' => t('Drupal should verify and enforce password strength on the server (i.e. not only in JavaScript).  Users will only be allowed to create high-security passwords.'),
  );
  
  return system_settings_form($form);
}




/**
 * Add the necessary classes, and validation to password_confirm elements
 */
function password_strength_expand_password_confirm($element) {
  drupal_add_js(drupal_get_path('module', 'password_strength'). '/password_strength.js');
  drupal_add_css(drupal_get_path('module', 'password_strength'). '/password_strength.css');
  
  $element = expand_password_confirm($element);
  $element['pass1']['#attributes'] = array('class' => 'password-field');
  $element['pass2']['#attributes'] = array('class' => 'password-confirm');
  
  // Only validate on server if admins want it
  if (variable_get('password_strength_verify_on_server', 0)) {
    $element['#validate']['password_strength_confirm_validate'] = array();
  }
  return $element;
}




/**
 * Implementation of hook_elements
 */
function password_strength_elements() {
  // Override the default password_confirm processor
  $type['password_confirm'] = array('#input' => TRUE, '#process' => array('password_strength_expand_password_confirm' => array()));
  return $type;
}




/**
 * @todo Validate password_confirm element strength using algorithm similar to JS algorithm
 * Confirmation that passwords match is already handled by password_confirm_validate
 */
function password_strength_confirm_validate($form) {
  global $user;
  $pass = $form['pass1']['#value'];
  
  $hasLetters = ereg("[a-zA-Z]", $pass);
  $hasNumbers = ereg("[0-9]", $pass);
  $hasPunctuation = ereg("[^a-zA-Z0-9]", $pass);
  $hasCasing = ereg("[a-z]+.*[A-Z]+|[A-Z]+.*[a-z]", $pass);
  
  // Check if length is less than 6 characters.
  if (strlen($pass) < 6) {
    form_error($form, t('Password is not long enough.'));
  }
  // Check if password is the same as the username (convert both to lowercase).
  else if (strtolower($pass) == strtolower($user->name)) {
    form_error($form, t('Password cannot be the same as the username.'));
  }
  // Check if it contains letters, numbers, punctuation, and upper/lower case.
  else if ($hasLetters && $hasNumbers && $hasPunctuation && $hasCasing) {
  }
  // Password is not secure enough so construct the medium-strength message.
  else {
    // Extremely bad passwords still count as low.
    $count = ($hasLetters ? 1 : 0) + ($hasNumbers ? 1 : 0) + ($hasPunctuation ? 1 : 0) + ($hasCasing ? 1 : 0);
    $strength = $count > 1 ? "medium" : "low";

    $msgs = array();
    if (!$hasLetters || !$hasCasing) {
      $msgs[] = t('Adding both upper and lowercase letters.');
    }
    if (!$hasNumbers) {
      $msgs[] = t('Adding numbers.');
    }
    if (!$hasPunctuation) {
      $msgs[] = t('Adding punctuation.');
    }
    if (count($msgs)) {
      $msg = 'The password does not include enough variation to be secure. Try:' . "<ul><li>" . implode("</li><li>", $msgs) . "</li></ul>";
      form_error($form, $msg);
    }
  }
  
  return $form;
}